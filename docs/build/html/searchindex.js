Search.setIndex({"titles": ["Base Model Handler", "Continuous Quantum Born Circuit Machine (QCBM)", "Continuous Quantum Generative Adversarial Network  (QGAN)", "Credit", "Discrete Quantum Born Circuit Machine (QCBM)", "Discrete Quantum Generative Adversarial Network (QGAN)", "Welcome to qugen\u2019s documentation!", "Installation"], "terms": {"class": [0, 1, 2, 4, 5], "qugen": [0, 1, 2, 4, 5, 7], "main": [0, 1, 2, 4, 5, 6, 7], "gener": [0, 1, 4, 6, 7], "base_model_handl": [0, 6], "basemodelhandl": [0, 1, 2, 4, 5, 6], "It": [0, 2, 4, 5, 6], "implement": [0, 6], "interfac": 0, "each": [0, 2, 4, 5, 6, 7], "continu": [0, 4, 6], "qgan": [0, 6], "qcbm": [0, 5, 6], "discret": [0, 1, 6], "which": [0, 1, 2, 4, 5, 6, 7], "includ": [0, 2, 4, 5], "build": [0, 1, 2, 4, 5, 6, 7], "train": [0, 1, 2, 4, 5, 6], "them": 0, "save": [0, 1, 2, 4, 5, 6, 7], "reload": [0, 1, 2, 4, 5, 6, 7], "sampl": [0, 1, 2, 4, 5, 6, 7], "from": [0, 1, 2, 4, 5, 7], "abstract": 0, "arg": [0, 1, 2, 4, 5], "kwarg": 0, "defin": 0, "architectur": [0, 2, 4, 5], "weight": [0, 1, 2, 4, 5, 7], "initi": [0, 1, 4], "i": [0, 2, 3, 4, 5, 6, 7], "also": [0, 6, 7], "typic": 0, "perform": [0, 1, 2, 4, 5, 6, 7], "here": [0, 6], "predict": [0, 1, 2, 4, 5, 6, 7], "arrai": [0, 1, 2, 4, 5], "draw": 0, "file_path": [0, 1, 2, 4, 5], "path": [0, 1, 2, 4, 5], "load": [0, 7], "set": [0, 1, 2, 4, 5, 6, 7], "paramet": [0, 1, 2, 4, 5, 7], "pathlib": 0, "sourc": [0, 7], "file": [0, 1, 2, 3, 4, 5, 7], "overwrit": [0, 1, 2, 4, 5], "bool": [0, 1, 2, 4, 5], "true": [0, 1, 2, 4, 5], "destin": 0, "flag": 0, "indic": 0, "ani": [0, 3], "exist": [0, 1, 2, 4, 5], "target": 0, "locat": [0, 4], "should": 0, "overwritten": 0, "continuous_qcbm_model_handl": [1, 6], "continuousqcbmmodelhandl": [1, 6], "model_nam": [1, 2, 4, 5, 7], "str": [1, 2, 4, 5], "data_set": [1, 2, 4], "n_qubit": [1, 2, 4, 5, 7], "int": [1, 2, 4, 5], "circuit_depth": [1, 2, 4, 5, 7], "random_se": [1, 2, 4, 5], "42": [1, 2, 5], "transform": [1, 2, 4, 5, 7], "pit": [1, 2, 4, 5], "initial_sigma": [1, 4], "float": [1, 2, 4, 5], "0": [1, 3, 4], "01": 1, "save_artefact": [1, 2, 4, 5], "slower_progress_upd": [1, 2, 4, 5], "fals": [1, 2, 4, 5], "model": [1, 2, 4, 5, 6], "The": [1, 2, 3, 4, 5, 6, 7], "name": [1, 2, 3, 4, 5, 7], "us": [1, 2, 3, 4, 5, 6, 7], "data": [1, 2, 4, 5, 6, 7], "disk": [1, 2, 4, 5], "get": [1, 2, 4], "part": [1, 2, 4, 5], "option": [1, 2, 4, 5], "number": [1, 2, 4, 5, 7], "qubit": [1, 2, 4, 5], "default": [1, 2, 4, 5], "2": [1, 2, 3, 4, 5, 6], "repetit": [1, 2, 4, 5], "qml": [1, 2, 4, 5], "stronglyentanglinglay": [1, 2, 4, 5], "1": [1, 2, 4, 5], "random": [1, 2, 4, 5], "seed": [1, 2, 5], "reproduc": [1, 2, 5], "type": [1, 2, 4, 5, 6, 7], "normal": [1, 2, 4, 5], "either": [1, 2, 3, 4, 5], "minmax": [1, 2, 4, 5], "valu": [1, 4, 6], "cma": [1, 4], "optim": [1, 4], "whether": [1, 2, 4, 5], "artefact": [1, 2, 4, 5], "updat": [1, 2, 4, 5], "progress": [1, 2, 4, 5], "bar": [1, 2, 4, 5], "less": 1, "frequent": 1, "return": [1, 2, 4, 5], "built": [1, 2, 4, 5, 7], "n_sampl": [1, 2, 4, 5], "32": [1, 2, 4, 5], "orgin": 1, "space": [1, 2, 4, 5], "np": [1, 2, 4, 5], "shape": [1, 2, 4, 5], "sample_dimens": [1, 2, 4, 5], "predict_transform": [1, 2, 4, 5, 6], "epoch": [1, 2, 4, 5, 7], "discrimin": [1, 2, 5, 6], "weights_fil": [1, 4], "pickl": [1, 2, 4, 5], "tupl": [1, 2, 4, 5], "contain": [1, 4, 7], "chang": [1, 2, 4, 5], "have": [1, 2, 4, 5, 6], "been": [1, 2, 4, 5], "made": [1, 2, 4, 5], "place": [1, 2, 4, 5], "well": [1, 2, 4, 5, 6], "where": [1, 2, 5], "alreadi": [1, 2, 4, 5], "unchang": [1, 2, 4, 5], "train_dataset": [1, 4, 5], "n_epoch": [1, 2, 4, 5, 7], "500": [1, 4], "batch_siz": [1, 2, 4, 5], "200": [1, 4], "hist_sampl": [1, 4], "10000": [1, 4], "plot_training_data": [1, 4, 6], "continuous_qgan_model_handl": [2, 6], "continuousqganmodelhandl": [2, 6, 7], "thi": [2, 3, 4, 5, 6], "specifici": [2, 4, 5], "circuit": [2, 5, 6], "ansatz": [2, 4, 5], "ar": [2, 3, 4, 5, 6, 7], "control": [2, 4, 5], "how": [2, 4, 5, 6], "often": [2, 4, 5], "If": [2, 4, 5], "everi": [2, 4, 5], "10": [2, 4, 5], "second": [2, 4, 5], "most": [2, 4, 5], "otherwis": [2, 4, 5], "tqdm": [2, 4, 5], "handler": [2, 4, 5, 6, 7], "strictli": [2, 4, 5], "necessari": [2, 4, 5], "variabl": [2, 4, 5], "sinc": [2, 4, 5], "all": [2, 4, 5, 7], "invers": [2, 4, 5], "wa": [2, 3, 4, 5], "abl": [2, 4, 5], "comput": [2, 4, 5], "kl": [2, 4, 5, 7], "diverg": [2, 4, 5, 7], "origin": [2, 4, 5], "n": [2, 4, 5], "dimension": [2, 4, 5], "unit": [2, 4, 5], "cube": [2, 4, 5], "metadata": [2, 5], "revers": [2, 5], "lookup": [2, 5], "tabl": [2, 5, 7], "min": [2, 5], "max": [2, 5], "train_dataset_original_spac": 2, "initial_learning_rate_gener": [2, 5], "initial_learning_rate_discrimin": [2, 5], "none": [2, 4, 5], "technic": [2, 5], "we": [2, 5, 6], "pass": [2, 5, 6], "through": [2, 5], "iter": [2, 5], "loop": [2, 5], "learn": [2, 5, 6], "rate": [2, 5], "classic": [2, 5, 6], "batch": [2, 5], "size": [2, 4, 5], "whole": [2, 5], "rais": [2, 5], "valueerror": [2, 5], "dataset": [2, 4, 5], "ha": [2, 4, 5, 7], "dimens": [2, 4, 5], "column": [2, 5], "equal": [2, 5], "3": [2, 5, 7], "project": 3, "develop": 3, "within": 3, "quantum": [3, 6, 7], "technologi": 3, "applic": 3, "consortium": 3, "qutac": [3, 7], "core": 3, "contribut": 3, "compani": 3, "aleksandar": [3, 7], "vuc": 3, "kovic": 3, "merck": 3, "kgaa": 3, "darmstadt": 3, "germani": 3, "oliv": [3, 7], "mitevski": [3, 7], "munich": 3, "re": 3, "carlo": [3, 7], "A": [3, 6, 7], "riofri": 3, "o": [3, 7], "bmw": 3, "group": 3, "caitlin": [3, 7], "jone": [3, 7], "basf": 3, "digit": 3, "solut": [3, 4], "gmbh": 3, "florian": [3, 7], "krellner": [3, 7], "sap": 3, "se": 3, "pallavi": 3, "bhardwaj": 3, "other": [3, 7], "joseph": [3, 7], "doetsch": [3, 7], "lufthansa": 3, "industri": 3, "AS": 3, "johann": [3, 7], "klepsch": [3, 7], "thoma": [3, 7], "ehmer": [3, 7], "andr": [3, 7], "luckow": [3, 7], "copyright": 3, "2023": [3, 7], "under": 3, "apach": 3, "version": 3, "you": 3, "mai": [3, 6], "except": 3, "complianc": 3, "obtain": 3, "copi": 3, "http": 3, "www": 3, "org": 3, "unless": 3, "requir": 3, "law": 3, "agre": 3, "write": 3, "softwar": 3, "distribut": [3, 4, 5, 6], "an": [3, 4, 6, 7], "basi": 3, "without": 3, "warranti": 3, "OR": 3, "condit": 3, "OF": 3, "kind": 3, "express": 3, "impli": [3, 4], "see": [3, 7], "specif": 3, "languag": 3, "govern": 3, "permiss": 3, "limit": [3, 5], "discrete_qcbm_model_handl": [4, 6], "discreteqcbmmodelhandl": [4, 6], "8": [4, 5, 6], "n_regist": [4, 5, 7], "circuit_typ": [4, 5], "copula": [4, 5], "hot_start_path": 4, "sigma": 4, "string": [4, 5, 6], "anstaz": [4, 5], "standard": [4, 5], "previous": 4, "numpi": 4, "format": 4, "start": 4, "evalu": [4, 6, 7], "loss": 4, "function": [4, 7], "candid": 4, "list": 4, "potenti": 4, "algorithm": 4, "correspond": 4, "entri": 4, "plot": 4, "estim": 4, "probabl": 4, "lastest": 4, "popul": 4, "fucntion": 4, "1e4": 4, "displai": 4, "debug": 4, "purpos": 4, "discrete_qgan_model_handl": [5, 6], "discreteqganmodelhandl": [5, 6], "data_set_nam": [5, 7], "noisi": 5, "uniformli": 5, "nois": 5, "around": 5, "help": 5, "specifi": [5, 7], "1000": 5, "modul": 6, "creat": [6, 7], "machin": 6, "simul": 6, "hardwar": 6, "pennylan": 6, "jax": 6, "acceler": 6, "accompani": 6, "public": 6, "character": [6, 7], "give": 6, "background": 6, "describ": 6, "detail": 6, "structur": 6, "result": 6, "given": 6, "paper": 6, "can": [6, 7], "replic": 6, "code": 6, "share": 6, "author": [6, 7], "hope": 6, "interest": 6, "commun": 6, "exampl": [6, 7], "impliment": 6, "differ": 6, "variat": 6, "ciruit": 6, "measur": 6, "output": 6, "interpret": 6, "directli": 6, "bit": 6, "expect": 6, "togeth": 6, "method": [6, 7], "histogram": 6, "neural": 6, "network": 6, "judg": 6, "valid": 6, "There": 6, "4": 6, "2d": 6, "3d": 6, "circl": 6, "cross": 6, "mix": 6, "gaussian": 6, "stock": 6, "packag": 6, "allow": 6, "instal": 6, "instruct": 6, "run": 6, "citat": 6, "contact": 6, "base": 6, "born": 6, "adversari": 6, "credit": 6, "licens": 6, "index": 6, "search": 6, "page": 6, "virtual": 7, "environ": 7, "e": 7, "g": 7, "conda": 7, "qugen_env": 7, "python": 7, "9": 7, "12": 7, "later": 7, "support": 7, "activ": 7, "enviro": 7, "pip": 7, "edit": 7, "mode": 7, "script": 7, "found": 7, "app": 7, "logist": 7, "train_xyz": 7, "py": 7, "train_continuous_qgan": 7, "hyperparamet": 7, "thei": 7, "import": 7, "need": 7, "four": 7, "shown": 7, "below": 7, "descript": 7, "its": 7, "To": 7, "work": 7, "follow": 7, "input": 7, "training_data": 7, "appropri": 7, "etc": 7, "meta": 7, "json": 7, "experi": 7, "modelnam": 7, "dure": 7, "log": 7, "train_discrete_copula_qcbm": 7, "instanc": 7, "your": 7, "chosen": 7, "take": 7, "argument": 7, "find": 7, "lowest": 7, "cost": 7, "articl": 7, "riofrio2023perform": 7, "titl": 7, "riofr": 7, "vu": 7, "v": 7, "c": 7, "kovi": 7, "journal": 7, "arxiv": 7, "preprint": 7, "2301": 7, "09363": 7, "year": 7, "info": 7, "de": 7}, "objects": {"qugen.main.generator.base_model_handler": [[0, 0, 1, 0, "BaseModelHandler", "It implements the interface for each of the models handlers (continuous QGAN/QCBM and discrete QGAN/QCBM), which includes building the models, training them, saving and reloading them, and generating samples from them."]], "qugen.main.generator.base_model_handler.BaseModelHandler": [[0, 1, 1, 0, "build", "Define the architecture of the model. Weights initialization is also typically performed here."], [0, 1, 1, 0, "predict", "Draw samples from the model."], [0, 1, 1, 0, "reload", "Loads the model from a set of weights."], [0, 1, 1, 0, "save", "Saves the model weights to a file."], [0, 1, 1, 0, "train", "Perform training of the model."]], "qugen.main.generator.continuous_qcbm_model_handler": [[1, 0, 1, 0, "ContinuousQCBMModelHandler", "Parameters:"]], "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler": [[1, 1, 1, 0, "build", "Build the discrete qcbm model."], [1, 1, 1, 0, "predict", "Generate samples from the trained model in the orginal space."], [1, 1, 1, 0, "predict_transform", "Generate samples from the trained model in the transformed space."], [1, 1, 1, 0, "reload", "Reload the parameters for the generator and the discriminator from the file weights_file."], [1, 1, 1, 0, "sample", "Generate samples from the trained model."], [1, 1, 1, 0, "save", "Save the generator weights to disk."], [1, 1, 1, 0, "train", "Perform training of the model."]], "qugen.main.generator.continuous_qgan_model_handler": [[2, 0, 1, 0, "ContinuousQGANModelHandler", "Parameters:"]], "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler": [[2, 1, 1, 0, "build", "Build the continuous qgan model. This specificies the architecture of the model, including the circuit ansatz, data transformation and whether the artefacts are saved."], [2, 1, 1, 0, "predict", "Generate samples from the trained model and perform the inverse of the data transformation which was used to transform the training data to be able to compute the KL-divergence in the original space."], [2, 1, 1, 0, "predict_transform", "Generate samples from the trained model in the transformed space (the n-dimensional unit cube)."], [2, 1, 1, 0, "reload", "Reload the model from the artefacts including the parameters for the generator and the discriminator, the metadata and the data transformation file (reverse lookup table or original min and max of the training data)."], [2, 1, 1, 0, "sample", "Generate samples from the trained model."], [2, 1, 1, 0, "save", "Save the generator and discriminator weights to disk."], [2, 1, 1, 0, "train", "Train the continuous QGAN."]], "qugen.main.generator.discrete_qcbm_model_handler": [[4, 0, 1, 0, "DiscreteQCBMModelHandler", "Parameters:"]], "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler": [[4, 1, 1, 0, "build", "Build the discrete qcbm model. This specificies the architecture of the model, including the circuit ansatz, data transformation and whether the artefacts are saved."], [4, 1, 1, 0, "evaluator", "Computes the loss function for all candidate solutions from CMA"], [4, 1, 1, 0, "plot_training_data", "Plot training data and compute an estimate of the true probability distribution"], [4, 1, 1, 0, "predict", "Generate samples from the trained model and perform the inverse of the data transformation which was used to transform the training data to be able to compute the KL-divergence in the original space."], [4, 1, 1, 0, "predict_transform", "Generate samples from the trained model in the transformed space (the n-dimensional unit cube)."], [4, 1, 1, 0, "reload", "Reload the model parameters and the lastest sigma for the continuing training of the generator from the file weights_file."], [4, 1, 1, 0, "save", "Save the generator weights to disk."], [4, 1, 1, 0, "train", "Train the discrete QCBM."]], "qugen.main.generator.discrete_qgan_model_handler": [[5, 0, 1, 0, "DiscreteQGANModelHandler", "Parameters:"]], "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler": [[5, 1, 1, 0, "build", "Build the discrete qgan model. This specificies the architecture of the model, including the circuit ansatz, data transformation and whether the artefacts are saved."], [5, 1, 1, 0, "predict", "Generate samples from the trained model and perform the inverse of the data transformation which was used to transform the training data to be able to compute the KL-divergence in the original space."], [5, 1, 1, 0, "predict_transform", "Generate samples from the trained model in the transformed space (the n-dimensional unit cube)."], [5, 1, 1, 0, "reload", "Reload the model from the artefacts including the parameters for the generator and the discriminator, the metadata and the data transformation file (reverse lookup table or original min and max of the training data)."], [5, 1, 1, 0, "save", "Save the generator and discriminator weights to disk."], [5, 1, 1, 0, "train", "Train the discrete QGAN."]]}, "objtypes": {"0": "py:class", "1": "py:method"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"]}, "titleterms": {"base": 0, "model": [0, 7], "handler": 0, "continu": [1, 2], "quantum": [1, 2, 4, 5], "born": [1, 4], "circuit": [1, 4], "machin": [1, 4], "qcbm": [1, 4], "gener": [2, 5], "adversari": [2, 5], "network": [2, 5], "qgan": [2, 5], "credit": 3, "licens": 3, "discret": [4, 5], "welcom": 6, "qugen": 6, "": 6, "document": 6, "content": 6, "indic": 6, "tabl": 6, "instal": 7, "instruct": 7, "train": 7, "run": 7, "citat": 7, "contact": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"Base Model Handler": [[0, "base-model-handler"]], "Continuous Quantum Born Circuit Machine (QCBM)": [[1, "continuous-quantum-born-circuit-machine-qcbm"]], "Continuous Quantum Generative Adversarial Network  (QGAN)": [[2, "continuous-quantum-generative-adversarial-network-qgan"]], "Credit": [[3, "credit"]], "License": [[3, "license"]], "Discrete Quantum Born Circuit Machine (QCBM)": [[4, "discrete-quantum-born-circuit-machine-qcbm"]], "Discrete Quantum Generative Adversarial Network (QGAN)": [[5, "discrete-quantum-generative-adversarial-network-qgan"]], "Welcome to qugen\u2019s documentation!": [[6, "welcome-to-qugen-s-documentation"]], "Contents": [[6, "contents"]], "Indices and tables": [[6, "indices-and-tables"]], "Installation": [[7, "installation"]], "Instructions for training and running models": [[7, "instructions-for-training-and-running-models"]], "Citation": [[7, "citation"]], "Contact": [[7, "contact"]]}, "indexentries": {"basemodelhandler (class in qugen.main.generator.base_model_handler)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler"]], "build() (qugen.main.generator.base_model_handler.basemodelhandler method)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler.build"]], "predict() (qugen.main.generator.base_model_handler.basemodelhandler method)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler.predict"]], "reload() (qugen.main.generator.base_model_handler.basemodelhandler method)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler.reload"]], "save() (qugen.main.generator.base_model_handler.basemodelhandler method)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler.save"]], "train() (qugen.main.generator.base_model_handler.basemodelhandler method)": [[0, "qugen.main.generator.base_model_handler.BaseModelHandler.train"]], "continuousqcbmmodelhandler (class in qugen.main.generator.continuous_qcbm_model_handler)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler"]], "build() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.build"]], "predict() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.predict"]], "predict_transform() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.predict_transform"]], "reload() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.reload"]], "sample() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.sample"]], "save() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.save"]], "train() (qugen.main.generator.continuous_qcbm_model_handler.continuousqcbmmodelhandler method)": [[1, "qugen.main.generator.continuous_qcbm_model_handler.ContinuousQCBMModelHandler.train"]], "continuousqganmodelhandler (class in qugen.main.generator.continuous_qgan_model_handler)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler"]], "build() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.build"]], "predict() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.predict"]], "predict_transform() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.predict_transform"]], "reload() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.reload"]], "sample() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.sample"]], "save() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.save"]], "train() (qugen.main.generator.continuous_qgan_model_handler.continuousqganmodelhandler method)": [[2, "qugen.main.generator.continuous_qgan_model_handler.ContinuousQGANModelHandler.train"]], "discreteqcbmmodelhandler (class in qugen.main.generator.discrete_qcbm_model_handler)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler"]], "build() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.build"]], "evaluator() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.evaluator"]], "plot_training_data() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.plot_training_data"]], "predict() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.predict"]], "predict_transform() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.predict_transform"]], "reload() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.reload"]], "save() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.save"]], "train() (qugen.main.generator.discrete_qcbm_model_handler.discreteqcbmmodelhandler method)": [[4, "qugen.main.generator.discrete_qcbm_model_handler.DiscreteQCBMModelHandler.train"]], "discreteqganmodelhandler (class in qugen.main.generator.discrete_qgan_model_handler)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler"]], "build() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.build"]], "predict() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.predict"]], "predict_transform() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.predict_transform"]], "reload() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.reload"]], "save() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.save"]], "train() (qugen.main.generator.discrete_qgan_model_handler.discreteqganmodelhandler method)": [[5, "qugen.main.generator.discrete_qgan_model_handler.DiscreteQGANModelHandler.train"]]}, "docurls": ["base_model.html", "cont_qcbm.html", "cont_qgan.html", "credit_license.html", "discrete_qcbm.html", "discrete_qgan.html", "index.html", "readme_link.html"]})